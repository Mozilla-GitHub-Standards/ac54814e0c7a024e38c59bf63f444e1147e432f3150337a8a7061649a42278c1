[1mdiff --git a/Makefile b/Makefile[m
[1mindex f829c95..f6f15e8 100644[m
[1m--- a/Makefile[m
[1m+++ b/Makefile[m
[36m@@ -23,4 +23,4 @@[m [mstaticcheck:[m
 [m
 gettools:[m
 	go get -u honnef.co/go/tools/...[m
[31m-	go get -u golang.org/x/lint/golint[m
[32m+[m	[32mgo get -u github.com/golang/lint/golint[m
[1mdiff --git a/pkcs7.go b/pkcs7.go[m
[1mindex c8580e1..93cec41 100644[m
[1m--- a/pkcs7.go[m
[1m+++ b/pkcs7.go[m
[36m@@ -84,7 +84,8 @@[m [mvar ([m
 [m
 func getHashForOID(oid asn1.ObjectIdentifier) (crypto.Hash, error) {[m
 	switch {[m
[31m-	case oid.Equal(OIDDigestAlgorithmSHA1), oid.Equal(OIDDigestAlgorithmECDSASHA1):[m
[32m+[m	[32mcase oid.Equal(OIDDigestAlgorithmSHA1), oid.Equal(OIDDigestAlgorithmECDSASHA1),[m
[32m+[m		[32moid.Equal(OIDDigestAlgorithmDSA), oid.Equal(OIDDigestAlgorithmDSASHA1):[m
 		return crypto.SHA1, nil[m
 	case oid.Equal(OIDDigestAlgorithmSHA256), oid.Equal(OIDDigestAlgorithmECDSASHA256):[m
 		return crypto.SHA256, nil[m
[1mdiff --git a/sign.go b/sign.go[m
[1mindex 0a6dc57..29127e1 100644[m
[1m--- a/sign.go[m
[1m+++ b/sign.go[m
[36m@@ -231,16 +231,17 @@[m [mfunc (sd *SignedData) Finish() ([]byte, error) {[m
 [m
 // RemoveAuthenticatedAttributes removes authenticated attributes from signedData[m
 // similar to OpenSSL's PKCS7_NOATTR or -noattr flags[m
[31m-func (sd *SignedData) RemoveAuthenticatedAttributes() error {[m
[32m+[m[32mfunc (sd *SignedData) RemoveAuthenticatedAttributes() {[m
 	for i := range sd.sd.SignerInfos {[m
[31m-		blankAttrs := &attributes{}[m
[31m-		finalBlankAttrs, err := blankAttrs.ForMarshalling()[m
[31m-		if err != nil {[m
[31m-			return err[m
[31m-		}[m
[31m-		sd.sd.SignerInfos[i].AuthenticatedAttributes = finalBlankAttrs[m
[32m+[m		[32msd.sd.SignerInfos[i].AuthenticatedAttributes = nil[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// RemoveUnauthenticatedAttributes removes unauthenticated attributes from signedData[m
[32m+[m[32mfunc (sd *SignedData) RemoveUnauthenticatedAttributes() {[m
[32m+[m	[32mfor i := range sd.sd.SignerInfos {[m
[32m+[m		[32msd.sd.SignerInfos[i].UnauthenticatedAttributes = nil[m
 	}[m
[31m-	return nil[m
 }[m
 [m
 // verifyPartialChain checks that a given cert is issued by the first parent in the list,[m
[36m@@ -282,9 +283,9 @@[m [mfunc signAttributes(attrs []attribute, pkey crypto.PrivateKey, digestAlg crypto.[m
 	h.Write(attrBytes)[m
 	hash := h.Sum(nil)[m
 [m
[31m-	// dsa doesn't implement crypto.Signer so we make a special case[m
 	switch pkey.(type) {[m
 	case *dsa.PrivateKey:[m
[32m+[m		[32m// dsa doesn't implement crypto.Signer so we make a special case[m
 		r, s, err := dsa.Sign(rand.Reader, pkey.(*dsa.PrivateKey), hash)[m
 		if err != nil {[m
 			return nil, err[m
[1mdiff --git a/verify.go b/verify.go[m
[1mindex c8ead23..530139c 100644[m
[1m--- a/verify.go[m
[1m+++ b/verify.go[m
[36m@@ -67,7 +67,7 @@[m [mfunc verifySignature(p7 *PKCS7, signer signerInfo, truststore *x509.CertPool) (e[m
 		if err == nil {[m
 			// signing time found, performing validity check[m
 			if signingTime.After(ee.NotAfter) || signingTime.Before(ee.NotBefore) {[m
[31m-				return fmt.Errorf("pkcs7: signing time %q is outside of certificate validity %q to %q",[m
[32m+[m				[32mreturn fmt.Errorf("pkcs7: signing time %q it outside of certificate validity %q to %q",[m
 					signingTime.Format(time.RFC3339),[m
 					ee.NotBefore.Format(time.RFC3339),[m
 					ee.NotBefore.Format(time.RFC3339))[m
[36m@@ -130,12 +130,8 @@[m [mfunc parseSignedData(data []byte) (*PKCS7, error) {[m
 	}[m
 	// Compound octet string[m
 	if compound.IsCompound {[m
[31m-		if compound.Tag == 4 {[m
[31m-			if _, err = asn1.Unmarshal(compound.Bytes, &content); err != nil {[m
[31m-				return nil, err[m
[31m-			}[m
[31m-		} else {[m
[31m-			content = compound.Bytes[m
[32m+[m		[32mif _, err = asn1.Unmarshal(compound.Bytes, &content); err != nil {[m
[32m+[m			[32mreturn nil, err[m
 		}[m
 	} else {[m
 		// assuming this is tag 04[m
[36m@@ -239,7 +235,7 @@[m [mfunc getSignatureAlgorithm(digestEncryption, digest pkix.AlgorithmIdentifier) (x[m
 				digest.Algorithm.String(), digestEncryption.Algorithm.String())[m
 		}[m
 	default:[m
[31m-		return -1, fmt.Errorf("pkcs7: unsupported algorithm %q",[m
[32m+[m		[32mreturn -1, fmt.Errorf("pkcs7: unsupported encryption algorithm %q",[m
 			digestEncryption.Algorithm.String())[m
 	}[m
 }[m
